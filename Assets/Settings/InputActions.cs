//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GameplayMap"",
            ""id"": ""a0114d95-ea79-48eb-b022-3b4fcd40c0ea"",
            ""actions"": [
                {
                    ""name"": ""SelectMovePosition"",
                    ""type"": ""Button"",
                    ""id"": ""cd1f4c86-a0fd-4f05-8002-f3667a79df61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AoeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""27d3a324-cc2f-47e1-a602-622f8ac145b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillShotAbility"",
                    ""type"": ""Button"",
                    ""id"": ""0e60f4c6-453b-4703-8637-d4284c0f97f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmSkillShotAbility"",
                    ""type"": ""Button"",
                    ""id"": ""f2febb09-e5aa-4761-a3d8-f2f174e22792"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""499c236d-3691-4c14-a4a7-9751365c9340"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMovePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7f26c0b-02dd-480f-90ab-427b5e41aaa7"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AoeAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""000a9887-b975-4a53-9c97-b0daf39b68d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillShotAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50870dd8-38ff-4486-bac9-3e1dc5e197a1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmSkillShotAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayMap
        m_GameplayMap = asset.FindActionMap("GameplayMap", throwIfNotFound: true);
        m_GameplayMap_SelectMovePosition = m_GameplayMap.FindAction("SelectMovePosition", throwIfNotFound: true);
        m_GameplayMap_AoeAbility = m_GameplayMap.FindAction("AoeAbility", throwIfNotFound: true);
        m_GameplayMap_SkillShotAbility = m_GameplayMap.FindAction("SkillShotAbility", throwIfNotFound: true);
        m_GameplayMap_ConfirmSkillShotAbility = m_GameplayMap.FindAction("ConfirmSkillShotAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayMap
    private readonly InputActionMap m_GameplayMap;
    private List<IGameplayMapActions> m_GameplayMapActionsCallbackInterfaces = new List<IGameplayMapActions>();
    private readonly InputAction m_GameplayMap_SelectMovePosition;
    private readonly InputAction m_GameplayMap_AoeAbility;
    private readonly InputAction m_GameplayMap_SkillShotAbility;
    private readonly InputAction m_GameplayMap_ConfirmSkillShotAbility;
    public struct GameplayMapActions
    {
        private @InputActions m_Wrapper;
        public GameplayMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectMovePosition => m_Wrapper.m_GameplayMap_SelectMovePosition;
        public InputAction @AoeAbility => m_Wrapper.m_GameplayMap_AoeAbility;
        public InputAction @SkillShotAbility => m_Wrapper.m_GameplayMap_SkillShotAbility;
        public InputAction @ConfirmSkillShotAbility => m_Wrapper.m_GameplayMap_ConfirmSkillShotAbility;
        public InputActionMap Get() { return m_Wrapper.m_GameplayMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayMapActionsCallbackInterfaces.Add(instance);
            @SelectMovePosition.started += instance.OnSelectMovePosition;
            @SelectMovePosition.performed += instance.OnSelectMovePosition;
            @SelectMovePosition.canceled += instance.OnSelectMovePosition;
            @AoeAbility.started += instance.OnAoeAbility;
            @AoeAbility.performed += instance.OnAoeAbility;
            @AoeAbility.canceled += instance.OnAoeAbility;
            @SkillShotAbility.started += instance.OnSkillShotAbility;
            @SkillShotAbility.performed += instance.OnSkillShotAbility;
            @SkillShotAbility.canceled += instance.OnSkillShotAbility;
            @ConfirmSkillShotAbility.started += instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.performed += instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.canceled += instance.OnConfirmSkillShotAbility;
        }

        private void UnregisterCallbacks(IGameplayMapActions instance)
        {
            @SelectMovePosition.started -= instance.OnSelectMovePosition;
            @SelectMovePosition.performed -= instance.OnSelectMovePosition;
            @SelectMovePosition.canceled -= instance.OnSelectMovePosition;
            @AoeAbility.started -= instance.OnAoeAbility;
            @AoeAbility.performed -= instance.OnAoeAbility;
            @AoeAbility.canceled -= instance.OnAoeAbility;
            @SkillShotAbility.started -= instance.OnSkillShotAbility;
            @SkillShotAbility.performed -= instance.OnSkillShotAbility;
            @SkillShotAbility.canceled -= instance.OnSkillShotAbility;
            @ConfirmSkillShotAbility.started -= instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.performed -= instance.OnConfirmSkillShotAbility;
            @ConfirmSkillShotAbility.canceled -= instance.OnConfirmSkillShotAbility;
        }

        public void RemoveCallbacks(IGameplayMapActions instance)
        {
            if (m_Wrapper.m_GameplayMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayMapActions @GameplayMap => new GameplayMapActions(this);
    public interface IGameplayMapActions
    {
        void OnSelectMovePosition(InputAction.CallbackContext context);
        void OnAoeAbility(InputAction.CallbackContext context);
        void OnSkillShotAbility(InputAction.CallbackContext context);
        void OnConfirmSkillShotAbility(InputAction.CallbackContext context);
    }
}
